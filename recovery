#!/usr/bin/python3

import os
import time
import datetime
import argparse
import logging
import winreg
import psutil
import wmi
import sqlite3
import win32evtlog
import subprocess


log_path = "./recovery.log"
timelaps = None

def registry_changes():
    logging.info("Registry branches changes date:\n")
    try:
        key_path = r"Software\Microsoft\Windows\CurrentVersion\Run"
        hive = winreg.HKEY_CURRENT_USER
        key = winreg.OpenKey(hive, key_path, 0, winreg.KEY_READ)
        last_write_time = winreg.QueryInfoKey(key)[2]
        unix_timestamp = filetime_to_unix_timestamp(last_write_time)
        last_write_date = datetime.datetime.fromtimestamp(unix_timestamp).strftime('%d-%m-%Y %H:%M:%S')
        if unix_timestamp > timelaps:
            logging.info("    %s CurrentVersionRun", last_write_date)
        else:
            logging.info("    No Registry changes")
    except Exception as e:
        logging.info(f"    Error: {e}")
    logging.info("\n")

def filetime_to_unix_timestamp(filetime):
    epoch_start = datetime.datetime(1601, 1, 1)
    interval = datetime.timedelta(microseconds=filetime // 10)
    unix_timestamp = (epoch_start + interval).timestamp()
    return int(unix_timestamp)


def file_changes():
    logging.info("Recent used/open files:\n")
    try:
        recent_folder = os.path.expandvars(r"%APPDATA%\Microsoft\Windows\Recent")
        files = os.listdir(recent_folder)

        for file in files:
            file_path = os.path.join(recent_folder, file)
            modification_date = os.path.getmtime(file_path)
            readable_date = time.strftime('%d-%m-%Y', time.localtime(modification_date))
            if modification_date >= timelaps:
                logging.info(f"    File: {file}")
                logging.info(f"    Modification Date: {readable_date}\n")
    except Exception as e:
        logging.info(f"    Error: {e}")
    logging.info("\n")


def installed_programs():
    logging.info("Installed programs:\n")
    try:
        cont = 0
        uninstall_key_path = r"Software\Microsoft\Windows\CurrentVersion\Uninstall"
        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, uninstall_key_path)
        num_subkeys = winreg.QueryInfoKey(key)[0]

        for i in range(num_subkeys):
            subkey_name = winreg.EnumKey(key, i)
            subkey_path = rf"{uninstall_key_path}\{subkey_name}"
            try:
                subkey = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, subkey_path)
                program_name = winreg.QueryValueEx(subkey, "DisplayName")[0]
                try:
                    install_date = winreg.QueryValueEx(subkey, "InstallDate")[0]
                    unix_date = datetime.datetime.strptime(install_date, '%Y%m%d').timestamp()
                    install_date = datetime.datetime.strptime(install_date, '%Y%m%d').strftime('%d-%m-%Y')
                    if unix_date >= timelaps:
                        cont += 1
                        logging.info(f"    Program: {program_name}")
                        logging.info(f"    Install Date: {install_date}\n")
                except:
                    updated_date = winreg.QueryInfoKey(subkey)[2]
                    unix_date = filetime_to_unix_timestamp(updated_date)
                    updated_date = datetime.datetime.fromtimestamp(unix_date).strftime('%d-%m-%Y %H:%M:%S')
                    if unix_date >= timelaps:
                        cont += 1
                        logging.info(f"    Program: {program_name}")
                        logging.info(f"    Updated Date: {updated_date}\n")
                winreg.CloseKey(subkey)
            except WindowsError:
                pass
        winreg.CloseKey(key)
        if cont == 0:
            logging.info("    No programs installed")
    except Exception as e:
        logging.info(f"    Error: {e}")
    logging.info("\n")


def get_process_creation_time(pid):
    c = wmi.WMI()
    processes = c.Win32_Process(ProcessId=pid)
    for process in processes:
        return process.CreationDate
    return None

def processes_on_execution():
    logging.info("Processes on execution:\n")
    try:
        processes = psutil.process_iter()
        for process in processes:
            creation_time = get_process_creation_time(process.pid)
            creation_time = datetime.datetime.strptime(creation_time.split(".")[0], "%Y%m%d%H%M%S")
            unix_time = creation_time.timestamp()
            creation_time = creation_time.strftime("%d-%m-%Y %H:%M:%S")
            if unix_time >= timelaps:
                logging.info(f"    Process Name: {process.name()}")
                logging.info(f"    Process ID: {process.pid}")
                logging.info(f"    Creation Time: {creation_time}\n")
    except Exception as e:
        logging.info(f"    Error: {e}")
    logging.info("\n")


def get_database(cursor):
    for row in cursor.fetchall():
        try:
            url = row[0]
            title = row[1]
            last_visit_time = row[2]
            last_visit_time = datetime.datetime(1601, 1, 1) + datetime.timedelta(microseconds=last_visit_time)
            unix_time = last_visit_time.timestamp()
            if unix_time >= timelaps:
                last_visit_time = last_visit_time.strftime("%d-%m-%Y %H:%M:%S")
                logging.info(f"    URL: {url}")
                logging.info(f"    Title: {title}")
                logging.info(f"    Last Visit Time: {last_visit_time}\n")
        except:
            pass
    logging.info(f"\n")

def browser_history():
    logging.info(f"Web Browser history:\n")
    logging.info(f"   Google Chrome:")
    try:
        history_file = os.path.expandvars(rf"%HOMEPATH%\AppData\Local\Google\Chrome\User Data\Default\History")
        conn = sqlite3.connect(history_file)
        cursor = conn.cursor()
        cursor.execute("SELECT url, title, last_visit_time FROM urls")
        get_database(cursor)
        cursor.close()
        conn.close()
    except Exception as e:
        logging.info(f"    Error: No history data found, {e}\n")
    logging.info(f"   Mozila Firefox:")
    try:
        history_file = os.path.expandvars(rf"%HOMEPATH%\AppData\Roaming\Mozilla\Firefox\Profiles\pcr65z6z.default-release\places.sqlite")
        conn = sqlite3.connect(history_file)
        cursor = conn.cursor()
        cursor.execute("SELECT url, title, last_visit_date FROM moz_places")
        get_database(cursor)
        cursor.close()
        conn.close()
    except Exception as e:
        logging.info(f"    Error: No history data found, {e}\n")
    logging.info(f"   Microsoft Edge:")
    try:
        history_file = os.path.expandvars(rf"%HOMEPATH%\AppData\Local\Microsoft\Edge\User Data\Default\History")
        conn = sqlite3.connect(history_file)
        cursor = conn.cursor()
        cursor.execute("SELECT url, title, last_visit_time FROM urls")
        get_database(cursor)
        cursor.close()
        conn.close()
    except Exception as e:
        logging.info(f"    Error: No history data found, {e}\n")


def connected_devices():
    logging.info(f"Connected Devices:\n")
    c = wmi.WMI()
    devices = c.Win32_PnPEntity()
    for device in devices:
        if device.Name:
            logging.info(f'    Name: {device.Name}') 
            logging.info(f'    Manufacturer: {device.Manufacturer}')
            logging.info(f'    Service: {device.Service}\n') 
    logging.info("\n")


def event_logs():
    logging.info("Event logs:\n")
    log_types = ["Application", "Security", "System", "Setup", "Forwarded Events", "Application and Services"]
    for log_type in log_types:
        try:
            logging.info(f'   {log_type} logs:')
            handle = win32evtlog.OpenEventLog(None, log_type)
            flags = win32evtlog.EVENTLOG_BACKWARDS_READ | win32evtlog.EVENTLOG_SEQUENTIAL_READ
            events = win32evtlog.ReadEventLog(handle, flags, 0)
            for event in events:
                unix_time = event.TimeGenerated.timestamp() 
                if unix_time >= timelaps:
                    logging.info(f'    EventID: {event.EventID}')
                    logging.info(f'    TimeGenerated: {event.TimeGenerated.strftime("%d-%m-%Y %H:%M:%S")}')
                    logging.info(f'    SourceName: {event.SourceName}')
                    logging.info(f'    Message: {event.StringInserts}\n')
            win32evtlog.CloseEventLog(handle)
            logging.info('\n')
        except Exception as e :
            logging.info(f'    Error: {e}\n')



def parse_arguments():
    parser = argparse.ArgumentParser(description="Program that extracts crucial artifacts on a given time laps")                 
    parser.add_argument("-t", "--timelaps", action="store", help="Time range in hours, default 24h" )
    arg = parser.parse_args()
    date_format = "%d-%m-%Y"
    try:
        if arg.timelaps is not None:
            arg.timelaps = datetime.datetime.strptime(arg.timelaps, date_format).timestamp()
        else:
            arg.timelaps = time.time() - (24 * 60 * 60)
        return arg
    except Exception as e:
        print(f"Error: {e}")
        exit()

if __name__ == "__main__":
    arg = parse_arguments()
    logging.basicConfig(filename=log_path, level=logging.INFO,
                        format='%(message)s',
                        datefmt='%d-%m-%Y %H:%M:%S')
    timelaps = arg.timelaps
    registry_changes()
    file_changes()
    installed_programs()
    processes_on_execution()
    browser_history()
    connected_devices()
    event_logs()
   



